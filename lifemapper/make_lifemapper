#!/usr/bin/python

"""
@summary: This module creates a non-functioning Lifemapper workflow
"""
import argparse

# String constants for building commands
GET_POINTS_CMD = "retrievePoints.py {speciesName} {outCsvFn}"
MODEL_SPECIES_CMD = "modelSpecies.py {pointsCsv} --scenario=20 --algorithm=MAXENT -o {outTxtFn}"
PROJECT_SPECIES_CMD = "projectSpecies.py {mdlTxtFn} --scenario=21 -o {projectionFn}"
GET_INTERSECT_VALUES_CMD = "getIntersectValues.py {projectionFn} {pointsCsv} -o {intersectValsFn}"
INTERSECT_LAYER_CMD = "intersect.py {shapegridFn} {layerFn} -o {outPAVFn} -v {intersectValsFn}"
CREATE_SHAPEGRID = "createShapegrid.py {sgFn}"
ASSEMBLE_PAM = "assemblePAM.py {pamFn} {pavs}"
CALCULATE_PAM_STATS = "calculate.py {pamFn} -o {pamStatsFn}"
RANDOMIZE_PAM = "randomizePAM.py {pamFn} -o {randPamFn}"
ASSEMBLE_PAM_STATS = "assembleStats.py {pamStats} -o {assembledPamStats}"
EVALUATE_SIGNIFICANCE = "evaluateSignificance.py {pamStatsFn} {randPamStatsFn}"

# ....................................
def createMakeflowCommand(targets, command, dependencies=[], comment=''):
   """
   @summary: Creates an entry for a Makeflow DAG document
   """
   return "#{comment}\n{targets} : {depends}\n   {cmd}\n".format(
              comment=comment, targets=' '.join(targets), 
              depends=' '.join(dependencies), cmd=command)

def addSpecies(spName, sgFn):
   """
   @summary: Adds entries for a species
   """
   output = ""
   # Get points
   pointsCsvFn = "{species}.csv".format(species=spName)
   pointsCmd = GET_POINTS_CMD.format(speciesName=spName, outCsvFn=pointsCsvFn)
   output += createMakeflowCommand([pointsCsvFn], pointsCmd, 
                      comment="Get points for {species}".format(species=spName))

   # Build model
   mdlFn = "{species}.txt".format(species=spName)
   mdlCmd = MODEL_SPECIES_CMD.format(pointsCsv=pointsCsvFn, outTxtFn=mdlFn)
   output += createMakeflowCommand([mdlFn], mdlCmd, dependencies=[pointsCsvFn],
                      comment="Create model for {species}".format(species=spName))

   # Project the model
   prjFn = "{species}.tif".format(species=spName)
   prjCmd = PROJECT_SPECIES_CMD.format(mdlTxtFn=mdlFn, projectionFn=prjFn)
   output += createMakeflowCommand([prjFn], prjCmd, dependencies=[mdlFn],
                     comment="Create projection for {species}".format(species=spName))

   # Get intersection values
   intValsFn = "{species}.vals".format(species=spName)
   intValsCmd = GET_INTERSECT_VALUES_CMD.format(projectionFn=prjFn, 
                             pointsCsv=pointsCsvFn, intersectValsFn=intValsFn)
   output += createMakeflowCommand([intValsFn], intValsCmd, 
                       dependencies=[pointsCsvFn, prjFn], 
                       comment="Get values for intersection")

   # Intersect with shapegrid 
   spPavFn = "{species}.pav".format(species=spName)
   intersectCmd = INTERSECT_LAYER_CMD.format(shapegridFn=sgFn, layerFn=prjFn, 
                                outPAVFn=spPavFn, intersectValsFn=intValsFn)
   output += createMakeflowCommand([spPavFn], intersectCmd, 
                       dependencies=[sgFn, prjFn, intValsFn],
                       comment="Intersect {species} with the shapegrid".format(species=spName))
   output += "\n"

   return spPavFn, output


# ............................................................................
if __name__ == "__main__":
   parser = argparse.ArgumentParser(description='Create a non-functioning Lifemapper workflow')
   parser.add_argument('number_of_species', type=int, help="The number of fake species to add")
   parser.add_argument('number_of_randomizations', type=int, help="The number of randomizations to perform")
   parser.add_argument('-o', dest='outputFn', help="Where to write out the workflow DAG (Use stdout if None)")
   args = parser.parse_args()
   sgFn = "Shapegrid.shp"
   output = ""
   pavs = []
   randPamStatsFiles = []

   # Run species tasks
   for i in range(args.number_of_species):
      spName = "Species_{0}".format(i)
      spPav, localOutput = addSpecies(spName, sgFn)
      output += localOutput
      pavs.append(spPav)

   # Create shapegrid
   sgCmd = CREATE_SHAPEGRID.format(sgFn=sgFn)
   output += createMakeflowCommand([sgFn], sgCmd, comment="Create shapegrid")

   # Assemble PAM
   pamFn = "myPAM.npy"
   pamCmd = ASSEMBLE_PAM.format(pamFn=pamFn, pavs=' '.join(pavs))
   output += createMakeflowCommand([pamFn], pamCmd, dependencies=pavs,
                 comment="Assemble PAM")

   # Add PAM randomizations
   for x in range(args.number_of_randomizations):
      randPamFn = "randPAM{0}.npy".format(x)
      randPamStatsFn = "randPAM{0}.stats".format(x)
      # Create a randomized PAM
      randPamCmd = RANDOMIZE_PAM.format(pamFn=pamFn, randPamFn=randPamFn)
      output += createMakeflowCommand([randPamFn], randPamCmd,
                   dependencies=[pamFn], 
                   comment="Randomize PAM {0}".format(x))

      # Calculate the stats for the PAM
      randPamStatsCmd = CALCULATE_PAM_STATS.format(pamFn=randPamFn, pamStatsFn=randPamStatsFn)
      output += createMakeflowCommand([randPamStatsFn], randPamStatsCmd,
                   dependencies=[randPamFn], comment="Calculate stats for random PAM {0}".format(x))
      randPamStatsFiles.append(randPamStatsFn)
   
   # Assemble statistics
   assembledRandStatsFn = "randPam.stats"
   assRandStatsCmd = ASSEMBLE_PAM_STATS.format(pamStats=' '.join(randPamStatsFiles), 
                           assembledPamStats=assembledRandStatsFn)
   output += createMakeflowCommand([assembledRandStatsFn], assRandStatsCmd,
                dependencies=randPamStatsFiles, comment="Aggregate stats")

   output += "\n"

   # Calculate stats for original PAM
   pamStatsFn = "pam.stats"
   pamStatsCmd = CALCULATE_PAM_STATS.format(pamFn=pamFn, pamStatsFn=pamStatsFn)
   output += createMakeflowCommand([pamStatsFn], pamStatsCmd, dependencies=[pamFn],
                 comment="Calculate stats for original PAM")

   sigFn = "significance.out"
   sigCmd = EVALUATE_SIGNIFICANCE.format(pamStatsFn=pamStatsFn, randPamStatsFn=assembledRandStatsFn)
   output += createMakeflowCommand([sigFn], sigCmd, dependencies=[pamStatsFn, assembledRandStatsFn],
                 comment="Evaluate if the results are significant")
   
   # output to file or print
   if args.outputFn is None:
      print output
   else:
      with open(args.outputFn, 'w') as outF:
         outF.write(output)

